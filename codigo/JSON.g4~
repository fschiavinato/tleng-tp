grammar JSON;
@header {
def p(x):
    if newline:
        print(ident*' ', end = '')
        newline = False
    if '\n' in x:
        x = x.split('\n', 1)
        print(x[0], end = '')
        newline = True
        if x[1] != '':
            p(x[1])
    else:
        print(x, end = '')
}

@members {
ident = 0
newline = True
}

json
   :  value
   ;

obj
   : '{' pair (',' pair)* '}' {ident += 2; p('\n')} 
   | '{' '}' {p('{}')}
   ;

pair
   : STRING ':' {p($STRING.text); p(':')} value
   ;

array
   : {p('-')} '[' value (','{p('-')} value)* ']'
   | '[' ']'
   ;

value
   : STRING {p($STRING.text)}
   | NUMBER {p($NUMBER.text)}
   | obj
   | array
   | 'true' {p('true')}
   | 'false' {p('false')}
   | 'null' {p('null')}
   ;


STRING
   : '"' (ESC | SAFECODEPOINT)* '"' 
   ;


fragment ESC
   : '\\' (["\\/bfnrt] | UNICODE)
   ;
fragment UNICODE
   : 'u' HEX HEX HEX HEX
   ;
fragment HEX
   : [0-9a-fA-F]
   ;
fragment SAFECODEPOINT
   : ~ ["\\\u0000-\u001F]
   ;


NUMBER
   : '-'? INT ('.' [0-9] +)? EXP?
   ;


fragment INT
   : '0' | [1-9] [0-9]*
   ;

// no leading zeros

fragment EXP
   : [Ee] [+\-]? INT
   ;

// \- since - means "range" inside [...]

WS
   : [ \t\n\r] + -> skip
   ;
